{"version":3,"sources":["logo.svg","data.js","table.js","mapo.js","App.js","reportWebVitals.js","index.js"],"names":["userAction","state","source","veri","a","sinir","ssinir","sinirla","query","query1","qpoligon","PolyFetch","PolygonJSON","array","wrapper","noktalar","polygonlar","bank","filter","nokta","getProperties","tags","school","place_of_worship","ebbox","JSON","stringify","stringe","q","url","fetch","method","body","response","json","cevap","transform2","g","transform","Object","values","reverse","mainProcess","element","pname","name","pid","id","ring","ways","ring1","current","pop","cord","geometry","map","geo","push","flat","length","last","currentindex","findIndex","way","splice","processWays","members","forEach","element2","index","type","newg","Polygon","pnoktalar","intersectsCoordinate","getGeometry","getCoordinates","banka","okul","cami","Feature","okullar","camiler","elements","pa","e","poly","nodes","noktalar2","noktarr","lon","lat","cnokta","noktaid","noktatag","noktaname","fnokta","Point","nodeProcess","node","f","addFeature","Tablo","props","poligon","plist","ilce","ilce2","values_","this","poligonToTable","Component","PublicMap","handleChange","bind","closer","overlayContent","overl","React","createRef","VectorSource","noktasource","center","fromLonLat","zoom","data","poligonlar","filtre","overlay","vector","VectorLayer","noktavector","overlay1","undefined","olmap","Map","target","layers","TileLayer","OSM","view","View","getView","setCenter","setZoom","setTarget","on","getCenter","getZoom","fsinir","transformExtent","calculateExtent","setState","document","getElementById","Overlay","autoPan","autoPanAnimation","duration","addOverlay","evt","feature","forEachFeatureAtPixel","pixel","getType","coordinates","overlaycont","setPosition","coordinate","toStringHDMS","toLonLat","prevProps","prevState","snapshot","setElement","console","log","clear","value","href","className","onClick","updateMap","style","width","height","e2","cleaning","onChange","htmlFor","ref","useract","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.772d3e7e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport Polygon from 'ol/geom/Polygon';\nimport {transformExtent} from 'ol/proj';\nimport {fromLonLat, transform} from 'ol/proj';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\n\nexport default async function userAction(state, source,veri) {\n    let sinir = state.sinir;\n    let ssinir = sinirla(sinir);\n    let query = query1(ssinir)\n    let qpoligon = query[0]\n    let qnode = query[1]\n    let url = 'https://z.overpass-api.de/api/interpreter';\n    let PolygonJSON = await PolyFetch(qpoligon,url);\n    let array = wrapper(PolygonJSON,source);\n    let noktalar = array[0];\n    let polygonlar = array[1];\n    veri[0] = noktalar;\n    veri[1] = polygonlar;\n    veri[2] = {};\n    veri[2].bank = noktalar.filter(nokta => nokta.getProperties().tags[\"amenity\"] === \"bank\" );\n    veri[2].school = noktalar.filter(nokta => nokta.getProperties().tags[\"amenity\"] === \"school\" );\n    veri[2].place_of_worship = noktalar.filter(nokta => nokta.getProperties().tags[\"amenity\"] === \"place_of_worship\" );\n    \n    \n}\n\nfunction sinirla(sinir) {\n    let ebbox = [sinir[1],sinir[0],sinir[3],sinir[2] ];\n    let stringe = JSON.stringify(ebbox[0])+','+JSON.stringify(ebbox[1])+','+JSON.stringify(ebbox[2])+','+JSON.stringify(ebbox[3]);\n    return stringe\n}\nfunction query1(stringe) {\n    var q2 = '[out:json] [bbox:'+ stringe   +'];(  relation[\"admin_level\"=6][\"type\"= \"boundary\"][\"boundary\"= \"administrative\"]; map_to_area->.a;  (node(area.a)[amenity];););  out geom; ';\n    var q3 = '[out:json] [bbox:'+ stringe   +'];(  node[\"amenity\"];);  out geom; ';\n    var r = [q2,q3]\n    return r\n}\n\nasync function PolyFetch(q, url) {\n    let response; \n    response = await fetch(url,{method: 'POST',\nbody:q });\n    let cevap = await response.json(); \n    return await cevap\n  \n}\n\n\nasync function test() {\n    let url = 'https://lz4.overpass-api.de/api/interpreter';\n    let q = '[out:json] [bbox:41.01935,28.83165,41.02202,29.01139];(  relation[\"admin_level\"=6][\"type\"= \"boundary\"][\"boundary\"= \"administrative\"];);  out geom; ';\n    let cevap = await PolyFetch(q, url);\n    let f = await mainProcess(cevap.elements[1]);\n    console.log( f);\n}\n\nfunction transform2(g) {\n    return transform(Object.values(g).reverse(),'EPSG:4326', 'EPSG:3857');\n  }\n\nfunction ways(element) {\n    var ways = [];\n    element.members.forEach((element2,index,array)=> {\n        if (element2.type ===\"way\") {\n          ways.push(element2);\n  \n            }\n        else; ; } ); \n    return ways\n}\n\nfunction processWays(ways ) {\n    var ring1 = [];\n    var current = ways.pop();\n      \n    var cord = current.geometry.map(geo=>transform(Object.values(geo).reverse(),'EPSG:4326', 'EPSG:3857'));\n\n    ring1.push(cord);\n    while(   JSON.stringify(ring1.flat()[0])    !==  JSON.stringify(ring1.flat()[ring1.flat().length - 1])) {\n        \n        var last = ring1.flat()[ring1.flat().length-1];\n\n        var currentindex = ways.findIndex(way => JSON.stringify(transform2(way.geometry[0])) == JSON.stringify(last));\n        \n        \n        \n        if (currentindex == -1) {\n          currentindex = ways.findIndex(way => JSON.stringify(transform2(way.geometry[way.geometry.length-1])) == JSON.stringify(last));\n          \n          current = ways.splice(currentindex, 1);\n          \n          cord = current[0].geometry.map(geo=>transform(Object.values(geo).reverse(),'EPSG:4326', 'EPSG:3857'));\n          ring1.push(cord.reverse());\n        } else {\n\n          current = ways.splice(currentindex, 1);\n          \n          \n          cord = current[0].geometry.map(geo=>transform(Object.values(geo).reverse(),'EPSG:4326', 'EPSG:3857'));\n          ring1.push(cord);\n          \n        }\n      }\n    return ring1\n}\n\nfunction mainProcess(element, noktalar) {\n    var pname = element.tags.name;\n    var pid = element.id;\n    let ways1 = ways(element);\n    let ring1 = processWays(ways1);\n    var ring = ring1.flat();\n    var newg = new Polygon([ring]);\n    var pnoktalar = noktalar.filter(nokta => newg.intersectsCoordinate(nokta.getGeometry().getCoordinates()));\n    let banka = pnoktalar.filter(nokta => nokta.getProperties().tags[\"amenity\"] === \"bank\" );\n    let okul = pnoktalar.filter(nokta => nokta.getProperties().tags[\"amenity\"] === \"school\" );\n    let cami = pnoktalar.filter(nokta => nokta.getProperties().tags[\"amenity\"] === \"place_of_worship\" );\n    let feature1 = new Feature({\n        geometry: new Polygon([ring]),\n        name : pname,\n        id : pid, \n        noktalar: pnoktalar,\n        bank: banka,\n        okullar: okul,\n        camiler: cami,        \n      });\n    return feature1\n\n}\n\nfunction poly(array) {\n    let pa = array.filter(e => e.type === \"relation\");\n    return pa\n}\nfunction node(array) {\n    let na = array.filter(e => e.type === \"node\");\n    return na\n}\n\nfunction nodeProcess (nodes) {\n    let noktalar2 = [];\n    nodes.forEach((element)=> {\n        var noktarr = [element.lon, element.lat];\n        var cnokta = transform(noktarr, 'EPSG:4326', 'EPSG:3857' );\n        var noktaid = element.id;\n        var noktatag = element.tags;\n        var noktaname = element.tags.name;\n        \n        var fnokta = new Feature({\n          geometry: new Point(cnokta),\n          id: noktaid,\n          tags: noktatag,\n          name: noktaname,\n        });\n        noktalar2.push(fnokta);\n    \n      } );\n    return noktalar2\n}\n\nfunction wrapper(json, source) {\n    let array = json.elements;\n    let pa = poly(array);\n    let nodes = node(array);\n    let noktalar = nodeProcess(nodes);\n    let polygonlar = [];\n    pa.forEach(element => {\n        let f = mainProcess(element,noktalar);\n        source.addFeature(f);\n        polygonlar.push(f);\n    });\n    return [noktalar,polygonlar]\n\n}\n\n\n\n\n\n","import React, { Component } from \"react\";\n\n\nclass Tablo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            noktalar: this.props.noktalar,\n            poligon: this.props.poligon,\n        }\n    }\n\n\n\n    poligonToTable(plist) {\n\n        let tablolist2 = plist.map((ilce, index) => {\n\n            let ilce2 = ilce.values_;\n\n            const { geometry, name, id, noktalar, bank, okullar, camiler } = ilce2;\n\n            return (\n                <tr key={id}>\n                    <td>{id}</td>\n                    <td>{name}</td>\n                    <td>{bank.length}</td>\n                    <td>{okullar.length}</td>\n                    <td>{camiler.length}</td>\n\n\n                </tr>\n            )\n        })\n        return tablolist2\n    }\n\n    render() {\n\n        return (\n\n            <div>\n\n\n                <table>\n                    <thead>\n                        <tr>\n                            <th >OSM id</th>\n                            <th >District Name</th>\n                            <th >Number of banks</th>\n                            <th >Number of Schools</th>\n                            <th >Number of Place of Worship</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.poligonToTable(this.state.poligon)}\n                    </tbody>\n\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Tablo;","import 'ol/ol.css';\nimport Map from 'ol/Map';\n\nimport VectorSource from 'ol/source/Vector';\nimport View from 'ol/View';\n\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\n\nimport { transformExtent } from 'ol/proj';\nimport { fromLonLat, transform } from 'ol/proj';\nimport OSM from 'ol/source/OSM';\n\nimport userAction from \"./data\";\nimport React, { Component } from \"react\";\nimport Tablo from './table';\nimport Overlay from 'ol/Overlay';\nimport { toLonLat } from 'ol/proj';\nimport { toStringHDMS } from 'ol/coordinate';\n\n\nclass PublicMap extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.closer = this.closer.bind(this);\n    this.overlayContent = this.overlayContent.bind(this);\n    this.veri = [];\n    this.overl = React.createRef();\n    this.source = new VectorSource({\n\n    });\n    this.noktasource = new VectorSource({\n\n    });\n    this.state = {\n      center: fromLonLat([28.979530, 41.015137]), zoom: 12,\n      data: false,\n      poligonlar: [],\n      noktalar: [],\n      sinir: [28.8059569, 40.9778498, 29.091700499999998, 41.10772969999999],\n      filtre: \"\",\n      overlay: false,\n    };\n\n    var vector = new VectorLayer({\n      source: this.source,\n\n\n    });\n    let noktavector = new VectorLayer({\n      source: this.noktasource,\n\n\n    });\n    this.overlay1 = undefined;\n\n\n    this.olmap = new Map({\n      target: null,\n      layers: [\n        new TileLayer({\n          source: new OSM()\n        }),\n        vector,\n        noktavector\n      ],\n      view: new View({\n        center: this.state.center,\n        zoom: this.state.zoom\n      })\n    });\n  }\n  updateMap() {\n    this.olmap.getView().setCenter(this.state.center);\n    this.olmap.getView().setZoom(this.state.zoom);\n  }\n  componentDidMount() {\n    this.olmap.setTarget(\"map\");\n\n    // Listen to map changes\n    this.olmap.on(\"moveend\", () => {\n      let center = this.olmap.getView().getCenter();\n      let zoom = this.olmap.getView().getZoom();\n      let fsinir = transformExtent(this.olmap.getView().calculateExtent(), 'EPSG:3857', 'EPSG:4326')\n      this.setState({ sinir: fsinir, center: center, zoom: zoom });\n    });\n    var container = document.getElementById('popup');\n    this.overlay1 = new Overlay({\n      element: this.overl.current,\n      autoPan: true,\n      autoPanAnimation: {\n        duration: 250,\n      },\n    });\n    this.olmap.addOverlay(this.overlay1);\n    this.olmap.on('singleclick', (evt) => {\n      var feature = this.olmap.forEachFeatureAtPixel(evt.pixel, function (feature) {\n        if (feature.getGeometry().getType() === \"Point\") {\n          return feature;\n        }\n\n      });\n      if (feature) {\n        var coordinates = feature.getGeometry().getCoordinates();\n        var name = feature.getProperties().name;\n        this.setState({ overlay: true, overlaycont: name });\n        this.overlay1.setPosition(coordinates);\n\n      }\n      else {\n        this.closer();\n      }\n      var coordinate = evt.coordinate;\n      var hdms = toStringHDMS(toLonLat(coordinate));\n\n\n\n    });\n\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.data === false && this.state.data === true) {\n      var container = document.getElementById('popup');\n      this.overlay1.setElement(this.overl.current);\n    }\n  }\n  useract() {\n    this.setState({ data: true });\n\n  }\n\n  cleaning() {\n    console.log(\"data temizliği başlıyor...\");\n    this.setState({\n      data: false,\n      poligonlar: [],\n      noktalar: []\n    });\n    this.source.clear();\n    this.noktasource.clear();\n  }\n  handleChange(e) {\n    let value = e.target.value;\n    this.setState({ filtre: value });\n    this.noktasource.clear();\n\n    let eklenecek = this.veri[2][value];\n    eklenecek.forEach(element => {\n      this.noktasource.addFeature(element);\n    });\n  }\n\n  closer() {\n    this.overlay1.setPosition(undefined);\n    this.setState({ overlay: false });\n  }\n\n  overlayContent(props) {\n    if (props.overlay) {\n      let name = props.overlaycont;\n      return (\n        <div>\n          <p>Name: {name} </p>\n          <a href=\"#\" id=\"popup-closer\" className=\"ol-popup-closer\" onClick={() => this.closer()}></a>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n\n  render() {\n    this.updateMap();\n    if (this.state.data) {\n      return (\n        <div id=\"main\" >\n          <div id=\"map\" style={{ width: \"100%\", height: \"360px\" }}></div>\n          <button onClick=\n\n            {e => {\n              this.source.clear();\n              this.noktasource.clear();\n              userAction(this.state, this.source, this.veri)\n            }}>Request OSM(OpenStreetMap) data with bounding box</button>\n          <button onClick={e2 => this.cleaning()}> Delete rendered data</button>\n          <form> Choose to render points :   \n            <input type=\"radio\" value=\"place_of_worship\" id=\"worship\"\n              onChange={this.handleChange} name=\"noktalar\" />            <label htmlFor=\"worship\">Place of worship</label>\n\n            <input type=\"radio\" value=\"school\" id=\"school\"\n              onChange={this.handleChange} name=\"noktalar\" />            <label htmlFor=\"school\" >Schools</label>\n\n            <input type=\"radio\" value=\"bank\" id=\"bank\"\n              onChange={this.handleChange} name=\"noktalar\" />            <label htmlFor=\"bank\" >Banks</label>\n          </form>\n          <Tablo noktalar={this.veri[0]} poligon={this.veri[1]}>\n          </Tablo>\n\n          \n          <div> <div id=\"popup\" className=\"ol-popup\" ref={this.overl}>\n\n\n            <div id=\"popup-content\">\n              <this.overlayContent overlay={this.state.overlay} overlaycont={this.state.overlaycont}> </this.overlayContent>\n            </div>\n          </div> </div>\n\n\n\n\n        </div>\n      );\n    }\n    else {\n      return (\n        <div id=\"main\" >\n          <div id=\"map\" style={{ width: \"100%\", height: \"360px\" }}></div>\n          <button onClick=\n\n            {e => {\n              userAction(this.state, this.source, this.veri)\n            }}>Request OSM(OpenStreetMap) data with bounding box</button>\n          <button onClick={e2 => this.cleaning()}>Delete rendered data</button>\n          <button onClick={e2 => this.useract()}>Create table from requested data</button>\n          <div> <div id=\"popup\" className=\"ol-popup\" ref={this.overl}>\n\n\n            <div id=\"popup-content\">\n              <this.overlayContent overlay={this.state.overlay} overlaycont={this.state.overlaycont}>\n              </this.overlayContent>\n            </div>\n          </div> </div>\n\n        </div>\n      );\n    }\n\n  }\n}\n\nexport default PublicMap;","import logo from './logo.svg';\nimport './App.css';\nimport PublicMap from './mapo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PublicMap />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}